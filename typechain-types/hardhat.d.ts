/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721URIStorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorageUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Achievement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Achievement__factory>;
    getContractFactory(
      name: "PermissionControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionControl__factory>;
    getContractFactory(
      name: "TranferEthWithCard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TranferEthWithCard__factory>;
    getContractFactory(
      name: "CardNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CardNFT__factory>;
    getContractFactory(
      name: "Family",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Family__factory>;
    getContractFactory(
      name: "FOLToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FOLToken__factory>;
    getContractFactory(
      name: "PoolFomo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolFomo__factory>;
    getContractFactory(
      name: "Home",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Home__factory>;
    getContractFactory(
      name: "IAssetPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAssetPool__factory>;
    getContractFactory(
      name: "ICard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICard__factory>;
    getContractFactory(
      name: "IFamily",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFamily__factory>;
    getContractFactory(
      name: "ILevels",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILevels__factory>;
    getContractFactory(
      name: "IMine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMine__factory>;
    getContractFactory(
      name: "INodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INodes__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "IPancakeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter__factory>;
    getContractFactory(
      name: "IRandom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandom__factory>;
    getContractFactory(
      name: "IWrappedCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedCoin__factory>;
    getContractFactory(
      name: "Levels",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Levels__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "Mine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mine__factory>;
    getContractFactory(
      name: "WrappedCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedCoin__factory>;
    getContractFactory(
      name: "Nodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Nodes__factory>;
    getContractFactory(
      name: "Random",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Random__factory>;
    getContractFactory(
      name: "PoolWeek",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolWeek__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BurnableUpgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "ERC721URIStorageUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorageUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Achievement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Achievement>;
    getContractAt(
      name: "PermissionControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionControl>;
    getContractAt(
      name: "TranferEthWithCard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TranferEthWithCard>;
    getContractAt(
      name: "CardNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CardNFT>;
    getContractAt(
      name: "Family",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Family>;
    getContractAt(
      name: "FOLToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FOLToken>;
    getContractAt(
      name: "PoolFomo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolFomo>;
    getContractAt(
      name: "Home",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Home>;
    getContractAt(
      name: "IAssetPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAssetPool>;
    getContractAt(
      name: "ICard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICard>;
    getContractAt(
      name: "IFamily",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFamily>;
    getContractAt(
      name: "ILevels",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILevels>;
    getContractAt(
      name: "IMine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMine>;
    getContractAt(
      name: "INodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INodes>;
    getContractAt(
      name: "IPancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: "IPancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "IPancakeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter>;
    getContractAt(
      name: "IRandom",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandom>;
    getContractAt(
      name: "IWrappedCoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedCoin>;
    getContractAt(
      name: "Levels",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Levels>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "Mine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mine>;
    getContractAt(
      name: "WrappedCoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedCoin>;
    getContractAt(
      name: "Nodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Nodes>;
    getContractAt(
      name: "Random",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Random>;
    getContractAt(
      name: "PoolWeek",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolWeek>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
