/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFamilyInterface extends utils.Interface {
  functions: {
    "childrenOf(address)": FunctionFragment;
    "depthOf(address)": FunctionFragment;
    "getForefathers(address,uint256)": FunctionFragment;
    "makeRelation(address)": FunctionFragment;
    "maxLayer()": FunctionFragment;
    "parentOf(address)": FunctionFragment;
    "rootAddress()": FunctionFragment;
    "totalAddresses()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "childrenOf"
      | "depthOf"
      | "getForefathers"
      | "makeRelation"
      | "maxLayer"
      | "parentOf"
      | "rootAddress"
      | "totalAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "childrenOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depthOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getForefathers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRelation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "maxLayer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rootAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAddresses",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "childrenOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depthOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getForefathers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRelation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxLayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parentOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAddresses",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFamily extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFamilyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    childrenOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    depthOf(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getForefathers(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeRelation(
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxLayer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    parentOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rootAddress(overrides?: CallOverrides): Promise<[string]>;

    totalAddresses(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  childrenOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  depthOf(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getForefathers(
    user: PromiseOrValue<string>,
    depth: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeRelation(
    parent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxLayer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  parentOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  rootAddress(overrides?: CallOverrides): Promise<string>;

  totalAddresses(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    childrenOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    depthOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForefathers(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    makeRelation(
      parent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxLayer(overrides?: CallOverrides): Promise<BigNumber>;

    parentOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    rootAddress(overrides?: CallOverrides): Promise<string>;

    totalAddresses(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    childrenOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depthOf(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getForefathers(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeRelation(
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxLayer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    parentOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalAddresses(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    childrenOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depthOf(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getForefathers(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeRelation(
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxLayer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    parentOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAddresses(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
