/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface INodesInterface extends utils.Interface {
  functions: {
    "distrubutionReward(uint256)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "setNoderPowerDelegate(address,uint256)": FunctionFragment;
    "takeReward(address)": FunctionFragment;
    "totalPower()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "distrubutionReward"
      | "earned"
      | "setNoderPowerDelegate"
      | "takeReward"
      | "totalPower"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "distrubutionReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNoderPowerDelegate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPower",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "distrubutionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNoderPowerDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPower", data: BytesLike): Result;

  events: {
    "NoderPowerChanged(address,uint256)": EventFragment;
    "TakedReward(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NoderPowerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakedReward"): EventFragment;
}

export interface NoderPowerChangedEventObject {
  account: string;
  power: BigNumber;
}
export type NoderPowerChangedEvent = TypedEvent<
  [string, BigNumber],
  NoderPowerChangedEventObject
>;

export type NoderPowerChangedEventFilter =
  TypedEventFilter<NoderPowerChangedEvent>;

export interface TakedRewardEventObject {
  owner: string;
  reward: BigNumber;
  time: BigNumber;
}
export type TakedRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TakedRewardEventObject
>;

export type TakedRewardEventFilter = TypedEventFilter<TakedRewardEvent>;

export interface INodes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INodesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    distrubutionReward(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setNoderPowerDelegate(
      account: PromiseOrValue<string>,
      power: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalPower(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  distrubutionReward(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earned(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setNoderPowerDelegate(
    account: PromiseOrValue<string>,
    power: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeReward(
    cardAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalPower(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    distrubutionReward(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNoderPowerDelegate(
      account: PromiseOrValue<string>,
      power: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPower(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NoderPowerChanged(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      power?: null
    ): NoderPowerChangedEventFilter;
    NoderPowerChanged(
      account?: PromiseOrValue<string> | null,
      power?: null
    ): NoderPowerChangedEventFilter;

    "TakedReward(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      reward?: null,
      time?: null
    ): TakedRewardEventFilter;
    TakedReward(
      owner?: PromiseOrValue<string> | null,
      reward?: null,
      time?: null
    ): TakedRewardEventFilter;
  };

  estimateGas: {
    distrubutionReward(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNoderPowerDelegate(
      account: PromiseOrValue<string>,
      power: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalPower(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    distrubutionReward(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNoderPowerDelegate(
      account: PromiseOrValue<string>,
      power: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
