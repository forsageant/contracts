/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface HomeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DELEGATE_ROLE()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "card()": FunctionFragment;
    "deposit(address)": FunctionFragment;
    "depositToken()": FunctionFragment;
    "devReceiptor()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "family()": FunctionFragment;
    "fomoPool()": FunctionFragment;
    "getAmountParams(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "levels()": FunctionFragment;
    "mine()": FunctionFragment;
    "quotaMultiplierPerOfLevel(uint8)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setWithdrawFeeRatioAtLevel(uint8,uint40)": FunctionFragment;
    "setWithdrawFeeReceiptor(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "takeReward(address)": FunctionFragment;
    "takeUnownedAssetBalance()": FunctionFragment;
    "unownedAssetTokenId()": FunctionFragment;
    "userInfoOf(address)": FunctionFragment;
    "weekPool()": FunctionFragment;
    "withdrawFeeRatioOfLevel(uint8)": FunctionFragment;
    "withdrawFeeReceiptor()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "DELEGATE_ROLE"
      | "MANAGER_ROLE"
      | "card"
      | "deposit"
      | "depositToken"
      | "devReceiptor"
      | "earned"
      | "family"
      | "fomoPool"
      | "getAmountParams"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "levels"
      | "mine"
      | "quotaMultiplierPerOfLevel"
      | "renounceRole"
      | "revokeRole"
      | "setWithdrawFeeRatioAtLevel"
      | "setWithdrawFeeReceiptor"
      | "supportsInterface"
      | "takeReward"
      | "takeUnownedAssetBalance"
      | "unownedAssetTokenId"
      | "userInfoOf"
      | "weekPool"
      | "withdrawFeeRatioOfLevel"
      | "withdrawFeeReceiptor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "card", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devReceiptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "family", values?: undefined): string;
  encodeFunctionData(functionFragment: "fomoPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(functionFragment: "mine", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quotaMultiplierPerOfLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFeeRatioAtLevel",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFeeReceiptor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeUnownedAssetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unownedAssetTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfoOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "weekPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeRatioOfLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeReceiptor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "card", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devReceiptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "family", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fomoPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quotaMultiplierPerOfLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFeeRatioAtLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFeeReceiptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeUnownedAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unownedAssetTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfoOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weekPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeRatioOfLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeReceiptor",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RewardIncreased(address,address,uint8,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TakedReward(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakedReward"): EventFragment;
}

export interface DepositedEventObject {
  owner: string;
  amount: BigNumber;
  time: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RewardIncreasedEventObject {
  owner: string;
  sender: string;
  rewardType: number;
  reward: BigNumber;
  time: BigNumber;
}
export type RewardIncreasedEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber],
  RewardIncreasedEventObject
>;

export type RewardIncreasedEventFilter = TypedEventFilter<RewardIncreasedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TakedRewardEventObject {
  owner: string;
  reward: BigNumber;
  time: BigNumber;
}
export type TakedRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TakedRewardEventObject
>;

export type TakedRewardEventFilter = TypedEventFilter<TakedRewardEvent>;

export interface Home extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HomeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DELEGATE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    card(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      cardAddr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    devReceiptor(overrides?: CallOverrides): Promise<[string]>;

    earned(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    family(overrides?: CallOverrides): Promise<[string]>;

    fomoPool(overrides?: CallOverrides): Promise<[string]>;

    getAmountParams(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      depositToken_: PromiseOrValue<string>,
      family_: PromiseOrValue<string>,
      levels_: PromiseOrValue<string>,
      mine_: PromiseOrValue<string>,
      weekPool_: PromiseOrValue<string>,
      fomoPool_: PromiseOrValue<string>,
      devReceiptor_: PromiseOrValue<string>,
      withdrawFeeReceiptor_: PromiseOrValue<string>,
      card_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    levels(overrides?: CallOverrides): Promise<[string]>;

    mine(overrides?: CallOverrides): Promise<[string]>;

    quotaMultiplierPerOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFeeRatioAtLevel(
      lv: PromiseOrValue<BigNumberish>,
      ratioE12: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFeeReceiptor(
      receiptor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeUnownedAssetBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unownedAssetTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardQuota: BigNumber;
        rewardTotal: BigNumber;
        rewardPending: BigNumber;
        totalDeposited: BigNumber;
      }
    >;

    weekPool(overrides?: CallOverrides): Promise<[string]>;

    withdrawFeeRatioOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    withdrawFeeReceiptor(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DELEGATE_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  card(overrides?: CallOverrides): Promise<string>;

  deposit(
    cardAddr: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  devReceiptor(overrides?: CallOverrides): Promise<string>;

  earned(
    cardAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  family(overrides?: CallOverrides): Promise<string>;

  fomoPool(overrides?: CallOverrides): Promise<string>;

  getAmountParams(
    cardAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, BigNumber]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    depositToken_: PromiseOrValue<string>,
    family_: PromiseOrValue<string>,
    levels_: PromiseOrValue<string>,
    mine_: PromiseOrValue<string>,
    weekPool_: PromiseOrValue<string>,
    fomoPool_: PromiseOrValue<string>,
    devReceiptor_: PromiseOrValue<string>,
    withdrawFeeReceiptor_: PromiseOrValue<string>,
    card_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  levels(overrides?: CallOverrides): Promise<string>;

  mine(overrides?: CallOverrides): Promise<string>;

  quotaMultiplierPerOfLevel(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFeeRatioAtLevel(
    lv: PromiseOrValue<BigNumberish>,
    ratioE12: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFeeReceiptor(
    receiptor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  takeReward(
    cardAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeUnownedAssetBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unownedAssetTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  userInfoOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardQuota: BigNumber;
      rewardTotal: BigNumber;
      rewardPending: BigNumber;
      totalDeposited: BigNumber;
    }
  >;

  weekPool(overrides?: CallOverrides): Promise<string>;

  withdrawFeeRatioOfLevel(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  withdrawFeeReceiptor(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DELEGATE_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    card(overrides?: CallOverrides): Promise<string>;

    deposit(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    devReceiptor(overrides?: CallOverrides): Promise<string>;

    earned(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    family(overrides?: CallOverrides): Promise<string>;

    fomoPool(overrides?: CallOverrides): Promise<string>;

    getAmountParams(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      depositToken_: PromiseOrValue<string>,
      family_: PromiseOrValue<string>,
      levels_: PromiseOrValue<string>,
      mine_: PromiseOrValue<string>,
      weekPool_: PromiseOrValue<string>,
      fomoPool_: PromiseOrValue<string>,
      devReceiptor_: PromiseOrValue<string>,
      withdrawFeeReceiptor_: PromiseOrValue<string>,
      card_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    levels(overrides?: CallOverrides): Promise<string>;

    mine(overrides?: CallOverrides): Promise<string>;

    quotaMultiplierPerOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFeeRatioAtLevel(
      lv: PromiseOrValue<BigNumberish>,
      ratioE12: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFeeReceiptor(
      receiptor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeUnownedAssetBalance(overrides?: CallOverrides): Promise<void>;

    unownedAssetTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardQuota: BigNumber;
        rewardTotal: BigNumber;
        rewardPending: BigNumber;
        totalDeposited: BigNumber;
      }
    >;

    weekPool(overrides?: CallOverrides): Promise<string>;

    withdrawFeeRatioOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    withdrawFeeReceiptor(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Deposited(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      time?: null
    ): DepositedEventFilter;
    Deposited(
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      time?: null
    ): DepositedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RewardIncreased(address,address,uint8,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      rewardType?: PromiseOrValue<BigNumberish> | null,
      reward?: null,
      time?: null
    ): RewardIncreasedEventFilter;
    RewardIncreased(
      owner?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      rewardType?: PromiseOrValue<BigNumberish> | null,
      reward?: null,
      time?: null
    ): RewardIncreasedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TakedReward(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      reward?: null,
      time?: null
    ): TakedRewardEventFilter;
    TakedReward(
      owner?: PromiseOrValue<string> | null,
      reward?: null,
      time?: null
    ): TakedRewardEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    card(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      cardAddr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    devReceiptor(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    family(overrides?: CallOverrides): Promise<BigNumber>;

    fomoPool(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountParams(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      depositToken_: PromiseOrValue<string>,
      family_: PromiseOrValue<string>,
      levels_: PromiseOrValue<string>,
      mine_: PromiseOrValue<string>,
      weekPool_: PromiseOrValue<string>,
      fomoPool_: PromiseOrValue<string>,
      devReceiptor_: PromiseOrValue<string>,
      withdrawFeeReceiptor_: PromiseOrValue<string>,
      card_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<BigNumber>;

    mine(overrides?: CallOverrides): Promise<BigNumber>;

    quotaMultiplierPerOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawFeeRatioAtLevel(
      lv: PromiseOrValue<BigNumberish>,
      ratioE12: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawFeeReceiptor(
      receiptor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeUnownedAssetBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unownedAssetTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weekPool(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeRatioOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeReceiptor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DELEGATE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    card(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      cardAddr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devReceiptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    family(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fomoPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountParams(
      cardAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      depositToken_: PromiseOrValue<string>,
      family_: PromiseOrValue<string>,
      levels_: PromiseOrValue<string>,
      mine_: PromiseOrValue<string>,
      weekPool_: PromiseOrValue<string>,
      fomoPool_: PromiseOrValue<string>,
      devReceiptor_: PromiseOrValue<string>,
      withdrawFeeReceiptor_: PromiseOrValue<string>,
      card_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    levels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quotaMultiplierPerOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFeeRatioAtLevel(
      lv: PromiseOrValue<BigNumberish>,
      ratioE12: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFeeReceiptor(
      receiptor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeReward(
      cardAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeUnownedAssetBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unownedAssetTokenId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weekPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeeRatioOfLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeeReceiptor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
