/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type AchievementResponseStruct = {
  child: PromiseOrValue<string>;
  level: PromiseOrValue<BigNumberish>;
  selfValue: PromiseOrValue<BigNumberish>;
  childrenTotalValue: PromiseOrValue<BigNumberish>;
};

export type AchievementResponseStructOutput = [
  string,
  number,
  BigNumber,
  BigNumber
] & {
  child: string;
  level: number;
  selfValue: BigNumber;
  childrenTotalValue: BigNumber;
};

export type AchievementRewardInfoStruct = {
  rewardType: PromiseOrValue<BigNumberish>;
  account: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type AchievementRewardInfoStructOutput = [number, string, BigNumber] & {
  rewardType: number;
  account: string;
  amount: BigNumber;
};

export interface AchievementInterface extends utils.Interface {
  functions: {
    "beforActivityValue(address)": FunctionFragment;
    "childrenAchievementsOf(address)": FunctionFragment;
    "distrubutionsForefathers(address,uint256,uint256)": FunctionFragment;
    "layerRewardDepths(uint256)": FunctionFragment;
    "layerRewardRatios(uint256)": FunctionFragment;
    "levelOf(address)": FunctionFragment;
    "levelRewardRatios(uint256)": FunctionFragment;
    "settlementDeepMaxLimit()": FunctionFragment;
    "userInfoOf(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beforActivityValue"
      | "childrenAchievementsOf"
      | "distrubutionsForefathers"
      | "layerRewardDepths"
      | "layerRewardRatios"
      | "levelOf"
      | "levelRewardRatios"
      | "settlementDeepMaxLimit"
      | "userInfoOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beforActivityValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "childrenAchievementsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "distrubutionsForefathers",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "layerRewardDepths",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "layerRewardRatios",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "levelOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "levelRewardRatios",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementDeepMaxLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfoOf",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "beforActivityValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childrenAchievementsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distrubutionsForefathers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layerRewardDepths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layerRewardRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "levelRewardRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementDeepMaxLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfoOf", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface Achievement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AchievementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beforActivityValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    childrenAchievementsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AchievementResponseStructOutput[]]>;

    distrubutionsForefathers(
      owner: PromiseOrValue<string>,
      amountValue: PromiseOrValue<BigNumberish>,
      searchDeepMaxLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [AchievementRewardInfoStructOutput[]] & {
        rewards: AchievementRewardInfoStructOutput[];
      }
    >;

    layerRewardDepths(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    layerRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    levelOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    levelRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    settlementDeepMaxLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        selfValue: BigNumber;
        childrenTotalValue: BigNumber;
        level: number;
      }
    >;
  };

  beforActivityValue(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  childrenAchievementsOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AchievementResponseStructOutput[]>;

  distrubutionsForefathers(
    owner: PromiseOrValue<string>,
    amountValue: PromiseOrValue<BigNumberish>,
    searchDeepMaxLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AchievementRewardInfoStructOutput[]>;

  layerRewardDepths(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  layerRewardRatios(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  levelOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  levelRewardRatios(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  settlementDeepMaxLimit(overrides?: CallOverrides): Promise<BigNumber>;

  userInfoOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      selfValue: BigNumber;
      childrenTotalValue: BigNumber;
      level: number;
    }
  >;

  callStatic: {
    beforActivityValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childrenAchievementsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AchievementResponseStructOutput[]>;

    distrubutionsForefathers(
      owner: PromiseOrValue<string>,
      amountValue: PromiseOrValue<BigNumberish>,
      searchDeepMaxLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AchievementRewardInfoStructOutput[]>;

    layerRewardDepths(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    layerRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    levelOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    levelRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    settlementDeepMaxLimit(overrides?: CallOverrides): Promise<BigNumber>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        selfValue: BigNumber;
        childrenTotalValue: BigNumber;
        level: number;
      }
    >;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    beforActivityValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childrenAchievementsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distrubutionsForefathers(
      owner: PromiseOrValue<string>,
      amountValue: PromiseOrValue<BigNumberish>,
      searchDeepMaxLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layerRewardDepths(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layerRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementDeepMaxLimit(overrides?: CallOverrides): Promise<BigNumber>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beforActivityValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childrenAchievementsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distrubutionsForefathers(
      owner: PromiseOrValue<string>,
      amountValue: PromiseOrValue<BigNumberish>,
      searchDeepMaxLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layerRewardDepths(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layerRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelRewardRatios(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settlementDeepMaxLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfoOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
